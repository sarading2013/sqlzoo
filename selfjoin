The basic syntax of SELF JOIN is as follows âˆ’

SELECT a.column_name, b.column_name...
FROM table1 a, table1 b
WHERE a.common_field = b.common_field;


1.
How many stops are in the database.

select count(id)
  from stops
  
 2.
Find the id value for the stop 'Craiglockhart'

select id
  from stops
    where name='Craiglockhart'
    
3.
Give the id and the name for the stops on the '4' 'LRT' service.

select id, name
  from stops join route
    on (stops.id=route.stop)
      where num='4'
            and company='lrt'
          
 
 SELECT id, name FROM stops, route
  WHERE id=stop
    AND company='LRT'
    AND num='4'
 
 
 4.
The query shown gives the number of routes that visit either London Road (149) or Craiglockhart (53). 
Run the query and notice the two services that link these stops have a count of 2. Add a HAVING clause to restrict the output to these two routes.

select company, num, count(*)
  from route
    where stop=149 or stop=53
      group by company, num
        having count(*)=2
        
        
SELECT company, num, COUNT(*)
FROM route WHERE stop=149 OR stop=53
GROUP BY company, num  
HAVING COUNT(*)=2

5.
Execute the self join shown and observe that b.stop gives all the places you can get to from Craiglockhart, without changing routes. 
Change the query so that it shows the services from Craiglockhart to London Road.
        
SELECT a.company, a.num, a.stop, b.stop
FROM route a JOIN route b ON
  (a.company=b.company AND a.num=b.num)
WHERE a.stop=53
      and b.stop=149
      
      
6.
The query shown is similar to the previous one, however by joining two copies of the stops table we can refer to stops by name rather than by number.
Change the query so that the services between 'Craiglockhart' and 'London Road' are shown. If you are tired of these places try 'Fairmilehead' against 'Tollcross' 
 
 select a.company, a.num, stopa.name, stopb.name
   from route a join route b
     on (a.company=b.company and a.num=b.num)
     join stops on (a.stop=stops.id)
     join stops on (b.stop=stops.id)
     where stopa.name='Craiglockhart'
           and stopb.name='London Road'
           
7.
Give a list of all the services which connect stops 115 and 137 ('Haymarket' and 'Leith')

SELECT DISTINCT R1.company, R1.num
  FROM route R1, route R2
  WHERE R1.num=R2.num AND R1.company=R2.company
    AND R1.stop=115 AND R2.stop=137
 
 
 select distinct a.company, a.num
  from route a join route b 
    on (a.company=b.company and a.num=b.num)
    join stops stopa on (a.stop=stopa.id)
    join stops stopb on (stopb.id=b.stop)
      where stopa.name='Haymarket'
            and stopb.name='Leith'
            
            
8.
Give a list of the services which connect the stops 'Craiglockhart' and 'Tollcross'

select a.company, a.num
  from route a join route b
    on (a.company=b.company and a.num=b.num)
     join stops stopa on (a.stop=stopa.id)
     join stops stopb on (b.stop=stopb.id)
       where stopa.name= 'Craiglockhart' 
             and stopb.name='Tollcross'
 
SELECT R1.company, R1.num
  FROM route R1, route R2, stops S1, stops S2
  WHERE R1.num=R2.num AND R1.company=R2.company
    AND R1.stop=S1.id AND R2.stop=S2.id
    AND S1.name='Craiglockhart'
    AND S2.name='Tollcross' 
 
9.
Give a distinct list of the stops which may be reached from 'Craiglockhart' by taking one bus, including 'Craiglockhart' itself, offered by the LRT company.
Include the company and bus no. of the relevant services. 
 
 SELECT DISTINCT S2.name, R2.company, R2.num
FROM stops S1, stops S2, route R1, route R2
WHERE S1.name='Craiglockhart'
  AND S1.id=R1.stop
  AND R1.company=R2.company AND R1.num=R2.num
  AND R2.stop=S2.id

10.
Find the routes involving two buses that can go from Craiglockhart to Lochend.
Show the bus no. and company for the first bus, the name of the stop for the transfer,
and the bus no. and company for the second bus.

Self-join twice to find buses that visit Craiglockhart and Lochend, then join those on matching stops.

LOGIC: 1. find the num and company for the ones with the stop 'Craiglockhart'; 
       2. find the num and company for the ones with the stop 'Lochend'; 
       3. find the shared stops from the two above-- using the table "stops" as the link; 
       4. display as required. 

SELECT S.num, S.company, S.name, T.num, T.company 
FROM 
    (SELECT DISTINCT a.num, a.company, sb.name 
     FROM route a JOIN route b ON (a.num = b.num and a.company = b.company) 
                  JOIN stops sa ON sa.id = a.stop 
                  JOIN stops sb ON sb.id = b.stop 
     WHERE sa.name = 'Craiglockhart') as S

JOIN

    (SELECT x.num, x.company, sy.name 
     FROM route x JOIN route y ON (x.num = y.num and x.company = y.company) 
                  JOIN stops sx ON sx.id = x.stop 
                  JOIN stops sy ON sy.id = y.stop 
     WHERE sx.name = 'Lochend') as T

ON (S.name = T.name)
ORDER BY S.num, S.name, T.num



select s.num, s.company,s.name, e.num, e.company
  from 
      (select distinct a.num, a.company, d.name
         from route a, route b, stops c, stops d
           where a.num=b.num and a.company=b.company
                 and a.stop=c.id and b.stop=d.id
                 and c.name='craiglockhart') as s
  join 
      (select distinct aa.num, aa.company, dd.name
         from route aa, route bb, stops cc, stops dd
           where aa.num=bb.num and aa.company=bb.company
                 and aa.stop=cc.id and bb.stop=dd.id
                 and cc.name='lochend') as e
  on (s.name=e.name)
  order by s.num, s.name, e.num
 
 
 
 
 
 
 
 
 
 
 
 
 
 
